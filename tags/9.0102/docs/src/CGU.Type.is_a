Enhanced `instanceof`.

----

### Syntax ###

>     CGU.is_a(object, compare)
> {: class=prettyprint}
>
> > **`object`** `<Mixed>`: The object to be compared.
> >
> > **`compare`** `<Mixed>`
> >
> > > `<String>`: A type name. (see [`types`](<%=getlink('CGU.Type.types')%>))
> > > `<Function>`: A constructor function. (`Array`, `String`, etc.)
> > > `<null>`: Alternative for constructor.
> > > `<undefined>`: Same as `<null>`.

### Return ###

> `<Boolean>`: The `object` is comparable.

----

### Example ###

>     'string' instanceOf String;    //=> false (primitives aren't actually objects)
>     CGU.is_a('string', String);    //=> true (promotes primitives)
>     
>     // promotes primitives
>     CGU.is_a(true, Boolean);           // primitive vs. constructor
>     CGU.is_a(0, 'number');             // primitive vs. type
>     CGU.is_a(new String(), 'string');  // object vs. type
>     
>     // demotes Object constructor comparisons to (CGU.type(...) == 'object')
>     CGU.is_a([], Object);  // false
>     CGU.is_a('', Object);  // false
>     CGU.is_a({}, Object);  // true
>     
>     // comparable against null and undefined
>     CGU.is_a(null, 'null');          // true
>     CGU.is_a(null, null);            // true
>     CGU.is_a(undefined, undefined);  // true
> {: class=prettyprint}
{: class=codebox}

----
