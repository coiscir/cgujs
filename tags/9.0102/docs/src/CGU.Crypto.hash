Generate a cryptographic hash of given data.

----

### Syntax ###

>     CGU.hash(algo, data [, options])
> {: class=prettyprint}
>
> > **`algo`** `<String>`: Name of the algorithm to use.
> >
> > **`data`** `<String>`: The data to be hashed.
> >
> > **`options`** `<Object>`: Specify additional settings. _(optional)_
> >
> > > **`hmac`** `<String>`: Specify an HMAC key.
> > >
> > > > `<null>`: HMAC is not used.
> > >
> > > **`unicode`** `<Boolean>`: Convert data from 16-bit to 8-bit before hashing.

### Return ###

> `<<Sequence>>`: An object that allows various encodings for a hash.
>
> > `<undefined>`: Either `algo` or `data` were not given.
> >
> > `<null>`: `algo` is not an available algorithm.
> >
> > `<false>`: `data` is not an 8-bit string and `options.unicode` is not used.

----

### Example ###

>     CGU.hash('md4', 'abc');     //=> <<Sequence>>
>     CGU.hash('sha256', 'abc');  //=> <<Sequence>>
>      
>     CGU.hash('md5', 'abc').hex();        //=> '900150983cd24fb0d6963f7d28e17f72'
>     CGU.hash('sha512', 'abc').base16();  //=> 'DDAF35A193617ABACC417349AE204...'
> {: class=prettyprint}
{: class=codebox}

----
