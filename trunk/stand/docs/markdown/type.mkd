----

# Type #

Enhanced Data-Type Distinction

----

### Properties ###

> #### `Version` ####
>  
> > A floating-point version number.  
> >  
> > Based on the date built: `Y.MMDD`  
> > Where `Y` is the number of years since 2000.

----

### Methods ###

> #### `clone` ####
>  
> > Create a new prototype copy of the object.  
> >  
> > **Return**: `<Mixed>`  
> >   
> > **Syntax**: `Type.clone(object)`  
> >   
> > > **_object_** `<Mixed>`: The object being cloned.  
> >  
> > **Examples**:  
> >  
> > > `Type.clone([123]);   //=> [123]`  
> > > `Type.clone('foo');   //=> 'foo'`  
> > > `Type.clone(/foo/);   //=> /foo/`  

> #### `get` ####
>  
> > Get the type name for an object.  
> >  
> > **Return**: `<String>`  
> >   
> > **Syntax**: `Type.get(object)`  
> >   
> > > **_object_** `<Mixed>`: The object being tested.  
> >  
> > **Examples**:  
> >  
> > > `Type.get([123]);  //=> 'array'`  
> > > `Type.get('foo');  //=> 'string'`  
> > > `Type.get(/foo/);  //=> 'regexp'`  

> #### `isof` ####
>  
> > Get the type name for an object.  
> >  
> > **Return**: `<Boolean>`  
> >   
> > **Syntax**: `Type.isof(object, type [, type [, ..]])`  
> >   
> > > **_object_** `<Mixed>`: The object being tested.  
> > >  
> > > **_type_** `<String>`: A type to test the object against.
> >  
> > **Examples**:  
> >  
> > > `Type.isof(123, 'array', 'number');  //=> true`  
> > > `Type.isof([0], 'array', 'number');  //=> true`  
> > > `Type.isof(1234, 'null', 'string');  //=> false`  
> > > `Type.isof(null, 'date', 'string');  //=> false`  
> > > `Type.isof(undefined, 'undefined');  //=> true`  

> #### `limit` ####
>  
> > Limit object's type. Short for combining `isof` and `clone`.  
> >  
> > **Return**: `<Mixed>`  
> >   
> > **Syntax**: `Type.limit(object, type [, type [, ..]])`  
> >   
> > > **_object_** `<Mixed>`: The object being tested and cloned.  
> > >  
> > > **_type_** `<String>`: A type to test the object against.
> >  
> > **Examples**:  
> >  
> > > `Type.limit(123, 'array', 'number');  //=> 123`  
> > > `Type.limit([0], 'array', 'number');  //=> [0]`  
> > > `Type.limit(1234, 'null', 'string');  //=> undefined `  
> > > `Type.limit(null, 'date', 'string');  //=> undefined `  
> > > `Type.limit(undefined, 'undefined');  //=> undefined`  
> >  
> > **Warning**: limiting to undefined can get false-positives (or false-negatives).  

> #### `types` ####
>  
> > Get a list of all recognized types.  
> >  
> > **Return**: `<Array>`  
> >   
> > **Syntax**: `Type.types()`  

----
